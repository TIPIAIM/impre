import {
  __commonJS
} from "./chunk-EWTE5DHJ.js";

// node_modules/num2words/src/numtowords.js
var require_numtowords = __commonJS({
  "node_modules/num2words/src/numtowords.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define([], function() {
          return factory(root);
        });
      } else if (typeof exports === "object") {
        module.exports = factory(root);
      } else {
        root.numToWords = factory(root);
      }
    })(typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : exports, function(window2) {
      "use strict";
      var arr = function arr2(x) {
        return Array.from(x);
      };
      var num = function num2(x) {
        return Number(x) || 0;
      };
      var str = function str2(x) {
        return String(x);
      };
      var isEmpty = function isEmpty2(xs) {
        return xs.length === 0;
      };
      var take = function take2(n) {
        return function(xs) {
          return xs.slice(0, n);
        };
      };
      var drop = function drop2(n) {
        return function(xs) {
          return xs.slice(n);
        };
      };
      var reverse = function reverse2(xs) {
        return xs.slice(0).reverse();
      };
      var comp = function comp2(f) {
        return function(g) {
          return function(x) {
            return f(g(x));
          };
        };
      };
      var not = function not2(x) {
        return !x;
      };
      var chunk = function chunk2(n) {
        return function(xs) {
          return isEmpty(xs) ? [] : [take(n)(xs)].concat(chunk2(n)(drop(n)(xs)));
        };
      };
      var num2Words = function num2Words2(n) {
        var a = ["", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"];
        var b = ["", "", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"];
        var g = ["", "thousand", "million", "billion", "trillion", "quadrillion", "quintillion", "sextillion", "septillion", "octillion", "nonillion"];
        var makeGroup = function makeGroup2(_ref) {
          var ones = _ref[0], tens = _ref[1], huns = _ref[2];
          return [num(huns) === 0 ? "" : a[huns] + " hundred ", num(ones) === 0 ? b[tens] : b[tens] && b[tens] + "-" || "", a[tens + ones] || a[ones]].join("");
        };
        var thousand = function thousand2(group, i) {
          return group === "" ? group : group + " " + g[i];
        };
        if (typeof n === "number") return numToWords(String(n));
        else if (n === "0") return "zero";
        else return comp(chunk(3))(reverse)(arr(n)).map(makeGroup).map(thousand).filter(comp(not)(isEmpty)).reverse().join(" ");
      };
      var constructor = function(number) {
        return num2Words(number);
      };
      return constructor;
    });
  }
});
export default require_numtowords();
//# sourceMappingURL=num2words.js.map
